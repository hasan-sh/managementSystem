{"version":3,"file":"static/webpack/static/development/pages/index.js.a2dfa9142018dabe8d61.hot-update.js","sources":["webpack:///./components/Category.js"],"sourcesContent":["import Link from 'next/link'\nimport React, { Component } from 'react'\nimport 'isomorphic-fetch'\n\nimport Layout from './layout.js'\nimport Project from './Project.js'\n\nimport css from '../style.css'\nconst API = 'http://localhost:4000/graphql'\n\nexport default class Category extends Component {\n  constructor() {\n    super()\n\n    // console.log('hallooo')\n\n    this.state = {\n      draggedProject: null,\n      fromCategoryId: ''\n    }\n  }\n\n  removeProject = id => {\n    console.log('Remove: ', id)\n  }\n\n  render() {\n    // console.log('the state:', this.state)\n    const { category, onDrop } = this.props\n\n    //   <Layout>\n    //       </Layout>\n    return (\n      <div\n        className={css.item}\n        key={category.id}\n        onDragOver={e => e.preventDefault()}\n        onDrop={e => onDrop(e, category.id)}\n      >\n        <div className={css.categoryName}>{category.name}</div>\n        {category.projects.map(project => (\n          <Project\n            key={project.id}\n            project={project}\n            categoryId={category.id}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n\n// I could have used optimized rendering where I get all the categories from the back-end and update the state accordingly.\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAYA;AACA;AACA;AATA;AACA;AACA;AAFA;AALA;AASA;AACA;;;AAKA;AACA;AADA;AAAA;AAAA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AASA;;;;AAvCA;AACA;AACA;;;;;A","sourceRoot":""}