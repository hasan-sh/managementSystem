{"version":3,"file":"static/webpack/static/development/pages/index.js.edac2dac90093029c60c.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react'\nimport 'isomorphic-fetch'\n\nimport Layout from '../components/layout.js'\nimport css from '../style.css'\nimport Category from '../components/Category.js'\nconst API = 'http://localhost:4000/graphql'\n\nexport default class ManagementSystem extends Component {\n  static async getInitialProps() {\n    const query = `{\n      allCategories {\n        id\n        name\n        projects {\n          title\n          description\n          id\n        }\n      }\n    }`\n    const res = await fetch(API, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({ query })\n    })\n\n    const { data } = await res.json()\n\n    return data\n  }\n\n  constructor() {\n    super()\n    this.state = {\n      categories: []\n    }\n  }\n\n  componentWillMount = () => {\n    this.setState({ categories: this.props.allCategories })\n  }\n\n  // dragStart = (e, draggedProject, fromCategoryId) => {\n  //   e.dataTransfer.setData('id', draggedProject.id)\n  //   this.setState({ draggedProject, fromCategoryId })\n  // }\n\n  onDrop = (e, targetCategoryId) => {\n    const fromCategoryId = e.dataTransfer.getData('fromCategoryId')\n    const draggedProject = JSON.parse(e.dataTransfer.getData('draggedProject'))\n\n    const categories = this.state.categories.slice()\n    if (targetCategoryId === fromCategoryId) return\n\n    // To category..\n    let targetCategory = []\n    let targetCategoryIndex = -1\n    categories.forEach((category, index) => {\n      if (category.id === targetCategoryId) {\n        targetCategory = category\n        targetCategoryIndex = index\n      } else if (fromCategoryId === category.id) {\n        category.projects = category.projects.filter(\n          project => project.id !== draggedProject.id\n        )\n      }\n    })\n\n    targetCategory.projects.push(draggedProject)\n    categories.splice(targetCategoryIndex, 1, targetCategory)\n    this.setState({ categories })\n\n    this.updateDB({\n      fromCategoryId,\n      toCategoryId: targetCategoryId,\n      projectId: draggedProject.id\n    })\n  }\n\n  updateDB = async ({ fromCategoryId, toCategoryId, projectId }) => {\n    const query = `\n      mutation  MoveProject($input: MoveProjectInput) {\n          moveProject(input: $input)\n          {\n            id\n            name\n            projects {\n              title\n              id\n            }\n          }\n         }\n    `\n    const res = await fetch(API, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        query,\n        variables: {\n          input: {\n            fromCategoryId,\n            toCategoryId,\n            projectId\n          }\n        }\n      })\n    })\n\n    const { data } = await res.json()\n    if (data) {\n      const categories = this.state.categories.slice()\n      categories.forEach((category, index) => {\n        console.log(category.id, fromCategoryId)\n        if (category.id === fromCategoryId) {\n          category.projects = category.projects.filter(\n            project => project.id !== projectId\n          )\n        }\n      })\n      this.setState({ categories })\n    }\n  }\n\n  removeProject = async (categoryId, projectId) => {\n    const query = `\n    mutation  RemoveProject($input: RemoveProjectInput) {\n        removeProject(input: $input) {\n            title\n            id\n            description\n        }\n    }\n  `\n    const res = await fetch(API, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        query,\n        variables: {\n          input: {\n            id: categoryId,\n            projectId\n          }\n        }\n      })\n    })\n\n    const { data } = await res.json()\n    console.log(data)\n  }\n\n  render() {\n    // console.log('the state:', this.state)\n    const { categories } = this.state\n\n    const allCategories = categories.map(category => (\n      // <div key={category.id} className={css.item}>\n      // </div>\n      <Category\n        key={category.id}\n        category={category}\n        onDrop={this.onDrop}\n        removeProject={this.removeProject}\n      />\n    ))\n\n    return (\n      <Layout>\n        <div className={css.container}>{allCategories}</div>\n      </Layout>\n    )\n  }\n}\n\n// I could have used optimized rendering where I get all the categories from the back-end and update the state accordingly.\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAEA;;AAWA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AANA;AACA;;AADA;;AASA;AACA;;;AADA;AAEA;AACA;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAQA;AAAA;AAAA;AACA;AACA;AAVA;AAiBA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAeA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAFA;AANA;AACA;AAfA;AAcA;AAdA;AAAA;AACA;AADA;AAAA;AAgCA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjDA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+FA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAWA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAFA;AANA;AACA;AAXA;AAUA;AAVA;AAAA;AACA;AADA;AAAA;AA2BA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAhGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AAwHA;AAAA;AACA;AAAA;AADA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AA7KA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}